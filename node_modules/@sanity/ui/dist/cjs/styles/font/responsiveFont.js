"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fontSize = exports.responsiveFont = void 0;
var helpers_1 = require("../helpers");
function responsiveFont(fontKey, props) {
    var size = props.size, theme = props.theme, weight = props.weight;
    var _a = theme.sanity.fonts[fontKey], family = _a.family, sizes = _a.sizes, weights = _a.weights;
    var fontWeight = (weight && weights[weight]) || weights['regular'];
    // @todo: make this configurable
    var defaultSize = sizes[2];
    var ret = __spreadArrays([
        {
            position: 'relative',
            fontFamily: family,
            fontWeight: fontWeight,
            padding: '1px 0',
            margin: 0,
            '&&:not([hidden])': {
                display: 'block',
            },
        }
    ], helpers_1.responsive(theme.sanity.media, helpers_1.getResponsiveProp(size).map(function (sizeIndex) { return fontSize(sizes[sizeIndex] || defaultSize); })));
    return ret;
}
exports.responsiveFont = responsiveFont;
function fontSize(size) {
    var negHeight = size.ascenderHeight + size.descenderHeight;
    var capHeight = size.lineHeight - negHeight;
    return {
        fontSize: helpers_1.rem(size.fontSize),
        lineHeight: helpers_1.rem(size.lineHeight),
        letterSpacing: helpers_1.rem(size.letterSpacing),
        transform: "translateY(" + helpers_1.rem(size.descenderHeight) + ")",
        '&:before': {
            marginTop: "calc(" + helpers_1.rem(0 - negHeight) + " - 1px)",
        },
        '&:after': {
            marginBottom: '-1px',
        },
        '& [data-sanity-icon]': {
            fontSize: helpers_1.rem(size.iconSize),
            margin: helpers_1.rem((capHeight - size.iconSize) / 2),
        },
    };
}
exports.fontSize = fontSize;
//# sourceMappingURL=responsiveFont.js.map