"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.color = void 0;
var color_1 = require("@sanity/color");
var polished_1 = require("polished");
var lib_1 = require("../lib");
var helpers_1 = require("./helpers");
var tones = {
    default: color_1.hues.gray,
    primary: color_1.hues.blue,
    positive: color_1.hues.green,
    caution: color_1.hues.yellow,
    critical: color_1.hues.red,
};
exports.color = lib_1.createColorTheme({
    base: function (_a) {
        var dark = _a.dark, name = _a.name;
        if (name === 'default') {
            return {
                fg: dark ? color_1.white.hex : color_1.black.hex,
                bg: dark ? color_1.black.hex : color_1.white.hex,
                border: color_1.hues.gray[dark ? 800 : 200].hex,
                focusRing: color_1.hues.blue[500].hex,
                shadow: {
                    outline: polished_1.rgba(color_1.hues.gray[500].hex, 0.35),
                    umbra: polished_1.rgba(dark ? color_1.black.hex : color_1.hues.gray[500].hex, 0.2),
                    penumbra: polished_1.rgba(dark ? color_1.black.hex : color_1.hues.gray[500].hex, 0.14),
                    ambient: polished_1.rgba(dark ? color_1.black.hex : color_1.hues.gray[500].hex, 0.12),
                },
            };
        }
        if (name === 'transparent') {
            var tints_1 = tones.default;
            return {
                fg: tints_1[dark ? 100 : 900].hex,
                bg: tints_1[dark ? 950 : 50].hex,
                border: tints_1[dark ? 800 : 200].hex,
                focusRing: color_1.hues.blue[500].hex,
                shadow: {
                    outline: polished_1.rgba(tints_1[500].hex, 0.35),
                    umbra: polished_1.rgba(dark ? color_1.black.hex : tints_1[500].hex, 0.2),
                    penumbra: polished_1.rgba(dark ? color_1.black.hex : tints_1[500].hex, 0.14),
                    ambient: polished_1.rgba(dark ? color_1.black.hex : tints_1[500].hex, 0.12),
                },
            };
        }
        var tints = tones[name] || tones.default;
        return {
            fg: tints[dark ? 100 : 900].hex,
            bg: tints[dark ? 950 : 50].hex,
            border: tints[dark ? 800 : 200].hex,
            focusRing: tints[500].hex,
            shadow: {
                outline: polished_1.rgba(tints[500].hex, 0.35),
                umbra: polished_1.rgba(dark ? color_1.black.hex : tints[500].hex, 0.2),
                penumbra: polished_1.rgba(dark ? color_1.black.hex : tints[500].hex, 0.14),
                ambient: polished_1.rgba(dark ? color_1.black.hex : tints[500].hex, 0.12),
            },
        };
    },
    solid: function (_a) {
        var base = _a.base, dark = _a.dark, state = _a.state, tone = _a.tone;
        var mix = dark ? helpers_1.screen : helpers_1.multiply;
        var tints = tones[tone] || tones.default;
        if (state === 'disabled') {
            return {
                bg: mix(base.bg, color_1.hues.gray[dark ? 800 : 200].hex),
                border: mix(base.bg, color_1.hues.gray[dark ? 900 : 100].hex),
                fg: mix(base.bg, dark ? color_1.black.hex : color_1.white.hex),
            };
        }
        if (state === 'hovered') {
            return {
                bg: mix(base.bg, tints[dark ? 300 : 600].hex),
                border: mix(base.bg, tints[dark ? 200 : 700].hex),
                fg: mix(base.bg, dark ? color_1.black.hex : color_1.white.hex),
            };
        }
        if (state === 'pressed') {
            return {
                bg: mix(base.bg, tints[dark ? 300 : 700].hex),
                border: mix(base.bg, tints[dark ? 200 : 800].hex),
                fg: mix(base.bg, dark ? color_1.black.hex : color_1.white.hex),
            };
        }
        if (state === 'selected') {
            return {
                bg: mix(base.bg, tints[dark ? 200 : 800].hex),
                border: mix(base.bg, tints[dark ? 100 : 900].hex),
                fg: mix(base.bg, dark ? color_1.black.hex : color_1.white.hex),
            };
        }
        // state: "enabled" | unknown
        return {
            bg: mix(base.bg, tints[dark ? 400 : 500].hex),
            border: mix(base.bg, tints[dark ? 300 : 600].hex),
            fg: mix(base.bg, dark ? color_1.black.hex : color_1.white.hex),
        };
    },
    muted: function (_a) {
        var base = _a.base, dark = _a.dark, state = _a.state, tone = _a.tone;
        var mix = dark ? helpers_1.screen : helpers_1.multiply;
        var tints = tones[tone] || tones.default;
        if (state === 'disabled') {
            return {
                bg: mix(base.bg, color_1.hues.gray[dark ? 950 : 50].hex),
                border: mix(base.bg, color_1.hues.gray[dark ? 900 : 100].hex),
                fg: mix(base.bg, color_1.hues.gray[dark ? 800 : 200].hex),
            };
        }
        if (state === 'hovered') {
            return {
                bg: mix(base.bg, tints[dark ? 900 : 100].hex),
                border: mix(base.bg, tints[dark ? 200 : 700].hex),
                fg: mix(base.bg, tints[dark ? 300 : 700].hex),
            };
        }
        if (state === 'pressed') {
            return {
                bg: mix(base.bg, tints[dark ? 900 : 100].hex),
                border: mix(base.bg, tints[dark ? 800 : 200].hex),
                fg: mix(base.bg, tints[dark ? 200 : 800].hex),
            };
        }
        if (state === 'selected') {
            return {
                bg: mix(base.bg, tints[dark ? 950 : 50].hex),
                border: mix(base.bg, tints[dark ? 100 : 900].hex),
                fg: mix(base.bg, tints[dark ? 300 : 700].hex),
            };
        }
        return {
            bg: mix(base.bg, tints[dark ? 950 : 50].hex),
            border: mix(base.bg, tints[dark ? 900 : 100].hex),
            fg: mix(base.bg, tints[dark ? 400 : 600].hex),
        };
    },
    button: function (_a) {
        var base = _a.base, mode = _a.mode, muted = _a.muted, solid = _a.solid;
        if (mode === 'bleed') {
            return {
                enabled: __assign(__assign({}, muted.enabled), { bg: 'transparent', border: 'transparent' }),
                hovered: __assign(__assign({}, muted.hovered), { bg: muted.enabled.bg, border: 'transparent' }),
                pressed: __assign(__assign({}, muted.pressed), { border: 'transparent' }),
                disabled: __assign(__assign({}, muted.disabled), { bg: 'transparent', border: 'transparent' }),
                selected: __assign(__assign({}, muted.selected), { border: 'transparent' }),
            };
        }
        return {
            enabled: mode === 'ghost'
                ? __assign(__assign({}, muted.enabled), { bg: 'transparent', border: base.border }) : __assign(__assign({}, solid.enabled), { border: 'transparent' }),
            hovered: __assign(__assign({}, solid.hovered), { border: 'transparent' }),
            pressed: __assign(__assign({}, solid.pressed), { border: 'transparent' }),
            selected: __assign(__assign({}, solid.selected), { border: 'transparent' }),
            disabled: mode === 'ghost'
                ? __assign(__assign({}, muted.disabled), { bg: 'transparent', border: muted.disabled.bg }) : __assign(__assign({}, solid.disabled), { border: 'transparent' }),
        };
    },
    input: function (_a) {
        var base = _a.base, dark = _a.dark, mode = _a.mode;
        var mix = dark ? helpers_1.screen : helpers_1.multiply;
        if (mode === 'invalid') {
            var tints = tones.critical;
            return {
                bg: mix(base.bg, tints[dark ? 950 : 50].hex),
                fg: mix(base.bg, tints[dark ? 300 : 700].hex),
                border: mix(base.bg, tints[dark ? 800 : 200].hex),
                placeholder: mix(base.bg, tints[dark ? 300 : 700].hex),
            };
        }
        return {
            bg: base.bg,
            fg: base.fg,
            border: base.border,
            placeholder: mix(base.bg, color_1.hues.gray[dark ? 300 : 700].hex),
        };
    },
    card: function (_a) {
        var base = _a.base, dark = _a.dark, muted = _a.muted, name = _a.name, state = _a.state;
        var mix = dark ? helpers_1.screen : helpers_1.multiply;
        if (state === 'selected') {
            mix = dark ? helpers_1.multiply : helpers_1.screen;
            var tint = ['default', 'transparent'].includes(name) ? color_1.hues.blue : tones[name];
            var bg = tint[dark ? 400 : 500].hex;
            return {
                bg: bg,
                fg: dark ? color_1.black.hex : color_1.white.hex,
                border: tint[dark ? 600 : 400].hex,
                muted: {
                    fg: mix(bg, color_1.hues.gray[dark ? 600 : 500].hex),
                },
                accent: {
                    fg: mix(bg, color_1.hues.red[dark ? 600 : 500].hex),
                },
                link: {
                    fg: mix(bg, color_1.hues.blue[dark ? 600 : 500].hex),
                },
                code: {
                    bg: mix(bg, color_1.hues.gray[dark ? 50 : 950].hex),
                    fg: mix(bg, color_1.hues.gray[dark ? 600 : 500].hex),
                },
            };
        }
        if (state === 'hovered') {
            return __assign(__assign({}, muted.hovered), { fg: base.fg, muted: {
                    fg: mix(muted.hovered.bg, color_1.hues.gray[dark ? 400 : 600].hex),
                }, accent: {
                    fg: mix(muted.hovered.bg, color_1.hues.red[dark ? 500 : 500].hex),
                }, link: {
                    fg: mix(muted.hovered.bg, color_1.hues.blue[dark ? 400 : 600].hex),
                }, code: {
                    bg: mix(muted.hovered.bg, color_1.hues.gray[dark ? 950 : 50].hex),
                    fg: color_1.hues.gray[dark ? 400 : 600].hex,
                } });
        }
        if (state === 'pressed') {
            return __assign(__assign({}, muted.pressed), { fg: base.fg, muted: {
                    fg: mix(muted.pressed.bg, color_1.hues.gray[dark ? 400 : 600].hex),
                }, accent: {
                    fg: mix(muted.pressed.bg, color_1.hues.red[dark ? 500 : 500].hex),
                }, link: {
                    fg: mix(muted.pressed.bg, color_1.hues.blue[dark ? 400 : 600].hex),
                }, code: {
                    bg: mix(muted.pressed.bg, color_1.hues.gray[dark ? 950 : 50].hex),
                    fg: color_1.hues.gray[dark ? 400 : 600].hex,
                } });
        }
        if (state === 'disabled') {
            return __assign(__assign({}, muted.disabled), { muted: {
                    fg: muted.disabled.fg,
                }, accent: {
                    fg: muted.disabled.fg,
                }, link: {
                    fg: muted.disabled.fg,
                }, code: {
                    bg: 'transparent',
                    fg: muted.disabled.fg,
                } });
        }
        return {
            bg: base.bg,
            fg: base.fg,
            border: base.border,
            muted: {
                fg: mix(base.bg, color_1.hues.gray[dark ? 400 : 600].hex),
            },
            accent: {
                fg: mix(base.bg, color_1.hues.red[dark ? 500 : 500].hex),
            },
            link: {
                fg: mix(base.bg, color_1.hues.blue[dark ? 400 : 600].hex),
            },
            code: {
                bg: mix(base.bg, color_1.hues.gray[dark ? 950 : 50].hex),
                fg: color_1.hues.gray[dark ? 400 : 600].hex,
            },
        };
    },
    spot: function (_a) {
        var dark = _a.dark, key = _a.key;
        return color_1.hues[key][dark ? 600 : 400].hex;
    },
    syntax: function (_a) {
        var dark = _a.dark;
        var mainShade = dark ? 400 : 600;
        var secondaryShade = dark ? 600 : 400;
        return {
            atrule: color_1.hues.purple[mainShade].hex,
            attrName: color_1.hues.green[mainShade].hex,
            attrValue: color_1.hues.yellow[mainShade].hex,
            attribute: color_1.hues.yellow[mainShade].hex,
            boolean: color_1.hues.purple[mainShade].hex,
            builtin: color_1.hues.orange[mainShade].hex,
            cdata: color_1.hues.yellow[mainShade].hex,
            char: color_1.hues.yellow[mainShade].hex,
            class: color_1.hues.orange[mainShade].hex,
            className: color_1.hues.cyan[mainShade].hex,
            comment: color_1.hues.gray[secondaryShade].hex,
            constant: color_1.hues.purple[mainShade].hex,
            deleted: color_1.hues.red[mainShade].hex,
            doctype: color_1.hues.gray[secondaryShade].hex,
            entity: color_1.hues.red[mainShade].hex,
            function: color_1.hues.green[mainShade].hex,
            hexcode: color_1.hues.blue[mainShade].hex,
            id: color_1.hues.purple[mainShade].hex,
            important: color_1.hues.purple[mainShade].hex,
            inserted: color_1.hues.yellow[mainShade].hex,
            keyword: color_1.hues.magenta[mainShade].hex,
            number: color_1.hues.purple[mainShade].hex,
            operator: color_1.hues.magenta[mainShade].hex,
            prolog: color_1.hues.gray[secondaryShade].hex,
            property: color_1.hues.blue[mainShade].hex,
            pseudoClass: color_1.hues.yellow[mainShade].hex,
            pseudoElement: color_1.hues.yellow[mainShade].hex,
            punctuation: color_1.hues.gray[mainShade].hex,
            regex: color_1.hues.blue[mainShade].hex,
            selector: color_1.hues.red[mainShade].hex,
            string: color_1.hues.yellow[mainShade].hex,
            symbol: color_1.hues.purple[mainShade].hex,
            tag: color_1.hues.red[mainShade].hex,
            unit: color_1.hues.orange[mainShade].hex,
            url: color_1.hues.red[mainShade].hex,
            variable: color_1.hues.red[mainShade].hex,
        };
    },
});
//# sourceMappingURL=color.js.map