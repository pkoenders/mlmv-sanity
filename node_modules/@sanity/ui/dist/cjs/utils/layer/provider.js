"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayerProvider = void 0;
var auto_id_1 = require("@reach/auto-id");
var react_1 = __importStar(require("react"));
var context_1 = require("./context");
function LayerProvider(props) {
    var _a = props.baseDepth, baseDepth = _a === void 0 ? 0 : _a, children = props.children, idProp = props.id;
    var parentLayer = react_1.useContext(context_1.LayerContext);
    var _b = react_1.useState(-1), size = _b[0], setSize = _b[1];
    var idsRef = react_1.useRef([]);
    var currentId = auto_id_1.useId(idProp);
    var mount = react_1.useCallback(function (id) {
        setSize(function (val) { return val + 1; });
        if (idsRef.current.includes(id)) {
            throw new Error("Layer: id already exists (\"" + id + "\")");
        }
        idsRef.current.push(id);
        return function () {
            setSize(function (val) { return val - 1; });
            var idx = idsRef.current.indexOf(id);
            if (idx > -1) {
                idsRef.current.splice(idx, 1);
            }
        };
    }, []);
    var layer = react_1.useMemo(function () {
        var layerDepth = parentLayer ? parentLayer.depth + 1 : 0;
        var layerSize = parentLayer ? parentLayer.size : size;
        var _currentId = parentLayer
            ? parentLayer.currentId
            : idsRef.current[idsRef.current.length - 1];
        return {
            currentId: _currentId,
            depth: baseDepth + layerDepth,
            isTopLayer: currentId === _currentId,
            mount: (parentLayer === null || parentLayer === void 0 ? void 0 : parentLayer.mount) || mount,
            size: layerSize,
        };
    }, [baseDepth, currentId, mount, parentLayer, size]);
    var mountFn = layer.mount;
    react_1.useEffect(function () {
        if (!currentId)
            return undefined;
        return mountFn(currentId);
    }, [currentId, mountFn]);
    return react_1.default.createElement(context_1.LayerContext.Provider, { value: layer }, children);
}
exports.LayerProvider = LayerProvider;
//# sourceMappingURL=provider.js.map