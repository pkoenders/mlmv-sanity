import { useId } from '@reach/auto-id';
import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';
import { LayerContext } from './context';
export function LayerProvider(props) {
    const { baseDepth = 0, children, id: idProp } = props;
    const parentLayer = useContext(LayerContext);
    const [size, setSize] = useState(-1);
    const idsRef = useRef([]);
    const currentId = useId(idProp);
    const mount = useCallback((id) => {
        setSize((val) => val + 1);
        if (idsRef.current.includes(id)) {
            throw new Error(`Layer: id already exists ("${id}")`);
        }
        idsRef.current.push(id);
        return () => {
            setSize((val) => val - 1);
            const idx = idsRef.current.indexOf(id);
            if (idx > -1) {
                idsRef.current.splice(idx, 1);
            }
        };
    }, []);
    const layer = useMemo(() => {
        const layerDepth = parentLayer ? parentLayer.depth + 1 : 0;
        const layerSize = parentLayer ? parentLayer.size : size;
        const _currentId = parentLayer
            ? parentLayer.currentId
            : idsRef.current[idsRef.current.length - 1];
        return {
            currentId: _currentId,
            depth: baseDepth + layerDepth,
            isTopLayer: currentId === _currentId,
            mount: (parentLayer === null || parentLayer === void 0 ? void 0 : parentLayer.mount) || mount,
            size: layerSize,
        };
    }, [baseDepth, currentId, mount, parentLayer, size]);
    const mountFn = layer.mount;
    useEffect(() => {
        if (!currentId)
            return undefined;
        return mountFn(currentId);
    }, [currentId, mountFn]);
    return React.createElement(LayerContext.Provider, { value: layer }, children);
}
//# sourceMappingURL=provider.js.map