// @todo: invent better name
export function createObject(props, value) {
    return props.reduce((acc, prop) => {
        acc[prop] = value;
        return acc;
    }, {});
}
export function rem(pixelValue) {
    if (pixelValue === 0)
        return 0;
    return `${pixelValue / 16}rem`;
}
export function responsive(media, statements) {
    return statements.map((statement, mediaIndex) => {
        if (mediaIndex === 0)
            return statement;
        const mediaKey = `@media(min-width:${media[mediaIndex - 1]}px)`;
        return {
            [mediaKey]: statement,
        };
    });
}
export function getResponsiveProp(val, defaultVal = []) {
    if (val === undefined)
        return defaultVal;
    return Array.isArray(val) ? val : [val];
}
export function getResponsiveSpace(theme, props, spaceIndexes = []) {
    if (!Array.isArray(spaceIndexes)) {
        throw new Error('the property must be array of numbers');
    }
    if (spaceIndexes.length === 0) {
        return null;
    }
    return responsive(theme.sanity.media, spaceIndexes.map((spaceIndex) => createObject(props, rem(theme.sanity.space[spaceIndex]))));
}
//# sourceMappingURL=helpers.js.map