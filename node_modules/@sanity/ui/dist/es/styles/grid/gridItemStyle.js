import { getResponsiveProp, responsive } from '../helpers';
export function gridItemStyle() {
    return [
        responsiveGridItemRowStyle,
        responsiveGridItemRowStartStyle,
        responsiveGridItemRowEndStyle,
        responsiveGridItemColumnStyle,
        responsiveGridItemColumnStartStyle,
        responsiveGridItemColumnEndStyle,
    ];
}
const GRID_ITEM_ROW = {
    auto: 'auto',
    full: '1 / -1',
};
const GRID_ITEM_COLUMN = {
    auto: 'auto',
    full: '1 / -1',
};
function responsiveGridItemRowStyle({ row, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(row).map((val) => {
        if (typeof val === 'number') {
            return { gridRow: `span ${val} / span ${val}` };
        }
        return { gridRow: GRID_ITEM_ROW[val] };
    }));
}
function responsiveGridItemRowStartStyle({ rowStart, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(rowStart).map((val) => ({ gridRowStart: val })));
}
function responsiveGridItemRowEndStyle({ rowEnd, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(rowEnd).map((val) => ({ gridRowEnd: val })));
}
function responsiveGridItemColumnStyle({ column, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(column).map((val) => {
        if (typeof val === 'number') {
            return { gridColumn: `span ${val} / span ${val}` };
        }
        return { gridColumn: GRID_ITEM_COLUMN[val] };
    }));
}
function responsiveGridItemColumnStartStyle({ columnStart, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(columnStart).map((val) => ({ gridColumnStart: val })));
}
function responsiveGridItemColumnEndStyle({ columnEnd, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(columnEnd).map((val) => ({ gridColumnEnd: val })));
}
//# sourceMappingURL=gridItemStyle.js.map