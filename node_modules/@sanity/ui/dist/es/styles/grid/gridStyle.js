import { getResponsiveProp, rem, responsive } from '../helpers';
const GRID_AUTO_COLUMS = {
    auto: 'auto',
    min: 'min-content',
    max: 'max-content',
    fr: 'minmax(0, 1fr)',
};
const GRID_AUTO_ROWS = {
    auto: 'auto',
    min: 'min-content',
    max: 'max-content',
    fr: 'minmax(0, 1fr)',
};
export function gridStyle({ autoCols, autoFlow, autoRows }) {
    return [
        {
            '&&:not([hidden])': {
                display: 'grid',
            },
            gridAutoFlow: autoFlow,
            gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols],
            gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows],
        },
        responsiveGridColumnsStyle,
        responsiveGridRowsStyle,
        responsiveGridGapStyle,
    ];
}
function responsiveGridColumnsStyle({ columns, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(columns).map((val) => ({
        gridTemplateColumns: val && `repeat(${val}, minmax(0, 1fr));`,
    })));
}
function responsiveGridRowsStyle({ rows, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(rows).map((val) => ({
        gridTemplateRows: val && `repeat(${val}, minmax(0, 1fr));`,
    })));
}
function responsiveGridGapStyle({ gap, theme }) {
    return responsive(theme.sanity.media, getResponsiveProp(gap).map((spaceIndex) => ({
        gridGap: gap ? rem(theme.sanity.space[spaceIndex]) : undefined,
    })));
}
//# sourceMappingURL=gridStyle.js.map