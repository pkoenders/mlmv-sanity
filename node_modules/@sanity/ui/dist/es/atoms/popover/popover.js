var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { cloneElement, forwardRef, useEffect, useState } from 'react';
import { usePopper } from 'react-popper';
import { Layer, Portal, useBoundaryElement, usePortal } from '../../utils';
import { Card } from '../card';
import { PopoverArrow } from './arrow';
export const Popover = forwardRef((props, ref) => {
    const boundaryElementContext = useBoundaryElement();
    const { boundaryElement: boundaryElementProp = boundaryElementContext, children: child, content, disabled, open, padding, placement: placementProp, portal: portalProp = true, radius = 3, referenceElement: referenceElementProp, shadow = 3, scheme, style = {} } = props, restProps = __rest(props, ["boundaryElement", "children", "content", "disabled", "open", "padding", "placement", "portal", "radius", "referenceElement", "shadow", "scheme", "style"]);
    const placement = typeof placementProp === 'string' ? placementProp : 'bottom';
    const portal = usePortal();
    const boundaryElement = boundaryElementProp || portal.boundaryElement;
    const [referenceElement, setReferenceElement] = useState(null);
    const [popperElement, setPopperElement] = useState(null);
    const [arrowElement, setArrowElement] = useState(null);
    const popperReferenceElement = referenceElementProp || referenceElement;
    const popper = usePopper(popperReferenceElement, popperElement, {
        placement,
        modifiers: [
            {
                name: 'arrow',
                options: {
                    element: arrowElement,
                    padding: 4,
                },
            },
            {
                name: 'preventOverflow',
                options: {
                    altAxis: true,
                    boundary: boundaryElement || undefined,
                    padding: 8,
                },
            },
            {
                name: 'offset',
                options: {
                    offset: [0, 4],
                },
            },
        ],
    });
    const { attributes, forceUpdate, styles } = popper;
    useEffect(() => {
        if (forceUpdate)
            forceUpdate();
    }, [forceUpdate, content, popperReferenceElement]);
    if (disabled) {
        return child || React.createElement(React.Fragment, null);
    }
    const setRef = (el) => {
        const childRef = child.ref;
        setReferenceElement(el);
        if (typeof childRef === 'function') {
            childRef(el);
        }
        else if (childRef) {
            childRef.current = el;
        }
    };
    const setRootRef = (el) => {
        setPopperElement(el);
        if (typeof ref === 'function')
            ref(el);
        else if (ref)
            ref.current = el;
    };
    const node = (React.createElement(Layer, Object.assign({ "data-ui": "Popover" }, restProps, { ref: setRootRef, style: Object.assign(Object.assign(Object.assign({}, style), styles.popper), { pointerEvents: 'all' }) }, attributes.popper),
        React.createElement(Card, { "data-ui": "PopoverCard", padding: padding, radius: radius, scheme: scheme, shadow: shadow },
            React.createElement(PopoverArrow, { ref: setArrowElement, tone: "default", style: styles.arrow }),
            content)));
    return (React.createElement(React.Fragment, null,
        child && !referenceElementProp ? cloneElement(child, { ref: setRef }) : child || React.createElement(React.Fragment, null),
        open && (React.createElement(React.Fragment, null,
            portalProp && React.createElement(Portal, null, node),
            !portalProp && node))));
});
Popover.displayName = 'Popover';
//# sourceMappingURL=popover.js.map