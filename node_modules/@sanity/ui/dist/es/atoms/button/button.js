var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { createElement, forwardRef } from 'react';
import styled from 'styled-components';
import { responsiveRadiusStyle, } from '../../styles';
import { useTheme } from '../../theme';
import { Box } from '../box';
import { Flex } from '../flex';
import { Icon } from '../icon';
import { Text } from '../text';
import { buttonBaseStyles, buttonColorStyles } from './styles';
const Root = styled.button(responsiveRadiusStyle, buttonBaseStyles, buttonColorStyles);
export const Button = forwardRef((props, ref) => {
    const { children, disabled, icon, iconRight, justify = 'center', mode = 'default', padding = 3, paddingX, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight, radius = 2, selected, size, space = 3, text, tone = 'default', type = 'button' } = props, restProps = __rest(props, ["children", "disabled", "icon", "iconRight", "justify", "mode", "padding", "paddingX", "paddingY", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "radius", "selected", "size", "space", "text", "tone", "type"]);
    const theme = useTheme();
    const boxProps = {
        padding,
        paddingX,
        paddingY,
        paddingTop,
        paddingBottom,
        paddingLeft,
        paddingRight,
    };
    return (React.createElement(Root, Object.assign({ "data-ui": "Button" }, restProps, { "data-disabled": disabled, "data-selected": selected ? '' : undefined, disabled: disabled, radius: radius, ref: ref, tone: tone, type: type, uiMode: mode }),
        (icon || text || iconRight) && (React.createElement(Box, Object.assign({ as: "span" }, boxProps),
            React.createElement(Flex, { as: "span", justify: justify },
                icon && (React.createElement(Text, { size: size },
                    typeof icon === 'function' && createElement(icon),
                    typeof icon === 'string' && React.createElement(Icon, { symbol: icon }))),
                text && (React.createElement(Box, { flex: iconRight ? 1 : undefined, marginLeft: icon ? space : undefined, marginRight: iconRight ? space : undefined },
                    React.createElement(Text, { size: size, weight: theme.sanity.button.textWeight }, text))),
                iconRight && (React.createElement(Text, { size: size },
                    typeof iconRight === 'function' && createElement(iconRight),
                    typeof iconRight === 'string' && React.createElement(Icon, { symbol: iconRight })))))),
        children && React.createElement("span", null, children)));
});
Button.displayName = 'Button';
//# sourceMappingURL=button.js.map