var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { cloneElement } from 'react';
import styled from 'styled-components';
import { rem } from '../../styles';
import { childrenToElementArray } from '../helpers';
import { AvatarCounter } from './avatarCounter';
import { avatarTheme } from './theme';
const Root = styled.div `
  white-space: nowrap;

  & > div {
    vertical-align: top;

    &:not([hidden]) {
      display: inline-block;
    }
  }

  & > div + div {
    margin-left: ${({ size }) => rem(avatarTheme.distance[size])};
  }
`;
export function AvatarStack(props) {
    const { children: childrenProp, maxLength: maxLengthProp = 4, size = 0, tone } = props, restProps = __rest(props, ["children", "maxLength", "size", "tone"]);
    const maxLength = Math.max(maxLengthProp, 0);
    const children = childrenToElementArray(childrenProp).filter((child) => typeof child !== 'string');
    const len = children.length;
    const visibleCount = maxLength - 1;
    const extraCount = len - visibleCount;
    const visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children;
    return (React.createElement(React.Fragment, null,
        React.createElement(Root, Object.assign({ "data-ui": "AvatarStack" }, restProps, { size: size }),
            len === 0 && (React.createElement("div", null,
                React.createElement(AvatarCounter, { count: len, tone: tone }))),
            len !== 0 && extraCount > 1 && (React.createElement("div", null,
                React.createElement(AvatarCounter, { count: extraCount, size: size, tone: tone }))),
            visibleChildren.map((child, childIndex) => (React.createElement("div", { key: String(childIndex) }, cloneElement(child, { size, tone })))))));
}
//# sourceMappingURL=avatarStack.js.map